Generative Adversarial Networks (GANs) - The Basics from Scratch! - PyTorch Deep Learning Tutorial
Overview
This tutorial introduces the fundamentals of Generative Adversarial Networks (GANs) and their implementation in PyTorch.
Key Concepts
GAN Architecture

GANs consist of two neural networks:
Generator (G): Creates fake data from random noise.
Discriminator (D): Classifies data as real or fake.
Trained together in a minimax game.
Loss Functions

Discriminator loss:

L_D = -torch.mean(torch.log(D(real_data))) - torch.mean(torch.log(1 - D(G(z))))
Generator loss:

L_G = -torch.mean(torch.log(D(G(z))))
Implementation Steps

Define the Generator and Discriminator:

import torch
import torch.nn as nn

class Generator(nn.Module):
    def __init__(self):
        super(Generator, self).__init__()
        self.model = nn.Sequential(
            nn.Linear(100, 256),
            nn.ReLU(),
            nn.Linear(256, 512),
            nn.ReLU(),
            nn.Linear(512, 784),
            nn.Tanh()  # Output shape for MNIST
        )

    def forward(self, z):
        return self.model(z)

class Discriminator(nn.Module):
    def __init__(self):
        super(Discriminator, self).__init__()
        self.model = nn.Sequential(
            nn.Linear(784, 512),
            nn.LeakyReLU(0.2),
            nn.Linear(512, 256),
            nn.LeakyReLU(0.2),
            nn.Linear(256, 1),
            nn.Sigmoid()
        )

    def forward(self, x):
        return self.model(x)
Training Loop:

generator = Generator()
discriminator = Discriminator()
criterion = nn.BCELoss()
optimizer_G = torch.optim.Adam(generator.parameters(), lr=0.0002)
optimizer_D = torch.optim.Adam(discriminator.parameters(), lr=0.0002)

for epoch in range(num_epochs):
    for real_data in dataloader:
        # Train Discriminator
        optimizer_D.zero_grad()
        z = torch.randn(batch_size, 100)
        fake_data = generator(z)
        real_labels = torch.ones(batch_size, 1)
        fake_labels = torch.zeros(batch_size, 1)

        D_loss = criterion(discriminator(real_data), real_labels) + \
                 criterion(discriminator(fake_data.detach()), fake_labels)
        D_loss.backward()
        optimizer_D.step()

        # Train Generator
        optimizer_G.zero_grad()
        G_loss = criterion(discriminator(fake_data), real_labels)
        G_loss.backward()
        optimizer_G.step()
Output Generation

Generate new samples by passing random noise through the generator:

with torch.no_grad():
    z = torch.randn(16, 100)
    generated_images = generator(z)
Common Challenges

Mode Collapse: The generator produces limited varieties of outputs.
Training Instability: Requires careful tuning of hyperparameters.
Conclusion
The tutorial provides a foundational understanding of GANs, focusing on their architecture, loss functions, and training process.